#+begin_src latex
  \section{Introduction}
  The results of a Blast search tell us which regions that are similar
  between a query and a subject. In the program \ty{cblast} we focus on
  the complement, the regions without homology.

  The input to \ty{cblast} consists of Blast hits, one per line. Each
  line in turn consists of five columns, chromosome, fragment start,
  fragment end, hit start, and hit end. Coordinates are one-based and
  intervals are inclusive. Notice that fragment intervals are located
  with respect to the chromosome start, while hit intervals are located
  with respect to the fragment start. Lines starting with a hash are
  ignored.

  Table~\ref{tab:cb}A shows some example input, which is visualized in
  Figure~\ref{fig:cb}. There is one query interval on chromosome 17 that
  stretches from 10 to 23. This interval has three Blast hits, $(1,2)$,
  $(5,7)$, and $(9,10)$. The program \ty{cblast} removes the Blast hits
  from the query and returns their complement, the three regions
  $(12,13)$, $(17,17)$, and $(20,23)$ (Table~\ref{fig:cb}B). It also
  prints the chromosome name and the start and end positions of the
  query interval, essentially the query interval's name.

  \begin{table}
    \caption{Example input (\textbf{A}) and output (\textbf{B}) for
      \ty{cblast}.}\label{tab:cb}
    \begin{center}
    \begin{tabular}{c|c}
      \textbf{A} & \textbf{B}\\\hline
      \begin{tabular}{lrrrr}
	chr17 & 10 & 23 & 1 & 2\\
	chr17 & 10 & 23 & 5 & 7\\
	chr17 & 10 & 23 & 9 & 10
      \end{tabular}
      &
      \begin{tabular}{lrrrr}
	chr17 & 10 & 23 & 12 & 13\\
	chr17 & 10 & 23 & 17 & 17\\
	chr17 & 10 & 23 & 20 & 23
      \end{tabular}
    \end{tabular}
    \end{center}
  \end{table}

  \begin{figure}
    \begin{center}
      \include{cblastFig}
    \end{center}
    \caption{Cartoon of the example \emph{query} and \emph{hits} listed in
      Table~\ref{tab:cb}A, and of the \emph{results} listed in Table~\ref{tab:cb}B.}\label{fig:cb}
  \end{figure}

  Note that in the example the intervals are ordered with respect to hit
  start, but \ty{cblast} should make no assumptions about the ordering
  of its input.

  \section{Implementation}
  The outline of \ty{cblast} contains hooks for imports, types,
  variables, functions, and the logic of the main function.
#+end_src
#+begin_src go <<cblast.go>>=
  package main

  import (
	  //<<Imports>>
  )
  //<<Types>>
  //<<Variables>>
  //<<Functions>>
  func main() {
	  //<<Main function>>
  }
#+end_src
#+begin_src latex
  In the main function we set the usage, declare the options, parse the
  options, and parse the input files.
#+end_src
#+begin_src go <<Main function>>=
  //<<Set usage>>
  //<<Declare options>>
  //<<Parse options>>
  //<<Parse input files>>
#+end_src
#+begin_src latex
  The usage consists of three parts, the actual usage message, an
  explanation of the program's purpose, and an example command.
#+end_src
#+begin_src go <<Set usage>>=
  u := "cblast [-h] [option]... [file]..."
  p := "Complement Blast results."
  e := "cblast -m 25 foo.txt"
  clio.Usage(u, p, e)
#+end_src
#+begin_src latex
  We import \ty{clio}.
#+end_src
#+begin_src go <<Imports>>=
  "github.com/evolbioinf/clio"
#+end_src
#+begin_src latex
  There are two options, the obligatory version (\ty{-v}) and the
  minimum length (\ty{-m}) of the intervals returned.
#+end_src
#+begin_src go <<Declare options>>=
  var optV = flag.Bool("v", false, "print program version " +
	  "and other information")
  var optM = flag.Int("m", 30, "minimum result length")
#+end_src
#+begin_src latex
  We import \ty{flag}.
#+end_src
#+begin_src go <<Imports>>=
  "flag"
#+end_src
#+begin_src latex
  We parse the options and immediately respond to \ty{-v}, as this stops
  the program.
#+end_src
#+begin_src go <<Parse options>>=
  flag.Parse()
  if *optV {
	  //<<Print version>>
	  os.Exit(0)
  }
#+end_src
#+begin_src latex
  We import \ty{os}.
#+end_src
#+begin_src go <<Imports>>=
  "os"
#+end_src
#+begin_src latex
  The version information consists of the name of the program, its
  version and date, author, email address, and license.
#+end_src
#+begin_src go <<Print version>>=
  n := "cblast"
  v := version
  d := date
  a := "Bernhard Haubold"
  e := "haubold@evolbio.mpg.de"
  l := "GNU General Public License, " +
	  "https://www.gnu.org/licenses/gpl.html"
  clio.PrintInfo(n, v, d, a, e, l)
#+end_src
#+begin_src latex
  The \ty{version} and \ty{date} we just referred to are injected at
  compile time. To make this possible, we declare them global.
#+end_src
#+begin_src go <<Variables>>=
  var version, date string
#+end_src
#+begin_src latex
  We import \ty{clio}.
#+end_src
#+begin_src go <<Imports>>=
  "github.com/evolbioinf/clio"
#+end_src
#+begin_src latex
  The remaining tokens on the command line are taken as the names of
  input files. Each of these files is parsed with the function
  \ty{scan}, which takes as argument the minimum interval length.
#+end_src
#+begin_src go <<Parse input files>>=
  files := flag.Args()
  clio.ParseFiles(files, scan, *optM)
#+end_src
#+begin_src latex
  Inside the function \ty{scan}, we first retrieve the minimum length by
  type assertion. Then we store the input data and when that's done
  print the complement. The question is, how to store the data? The
  example in Table~\ref{tab:cb}A suggests that we concatenate chromosome,
  start, and end to create an identifier for each query. This serves as
  a key into two maps of intervals, \ty{queries} and \ty{hits}. The
  first holds a single query interval, the second the corresponding
  Blast hits.
#+end_src
#+begin_src go <<Functions>>=
  func scan(r io.Reader, args ...interface{}) {
	  minLen := args[0].(int)
	  queries := make(map[string]Interval)
	  hits := make(map[string][]Interval)
	  sc := bufio.NewScanner(r)
	  for sc.Scan() {
		  //<<Store data>>
	  }
	  //<<Print complement>>
  }
#+end_src
#+begin_src latex
  We import \ty{io} and \ty{bufio}.
#+end_src
#+begin_src go <<Imports>>=
  "io"
  "bufio"
#+end_src
#+begin_src latex
  We interpret all lines that don't start with a hash as data. To store
  the data, we form the key for the maps from the first three data
  fields. If this key is new, we add a query. We also add a Blast hit.
#+end_src
#+begin_src go <<Store data>>=
  if sc.Text()[0] == '#' { continue }
  fields := strings.Fields(sc.Text())
  k := fields[0] + fields[1] + fields[2]
  if _, ok := queries[k]; !ok {
	  //<<Add query>>
  }
  //<<Add hit>>
#+end_src
#+begin_src latex
  We import \ty{strings}.
#+end_src
#+begin_src go <<Imports>>=
  "strings"
#+end_src
#+begin_src latex
  We convert the query start and end from the second and third fields
  and turn it into zero-based coordinates.
#+end_src
#+begin_src go <<Add query>>=
  qs, err := strconv.Atoi(fields[1])
  if err != nil {
	  log.Fatal(err.Error())
  }
  qe, err := strconv.Atoi(fields[2])
  if err != nil {
	  log.Fatal(err.Error())
  }
  i := Interval{Chr: fields[0], Start: qs-1, End: qe-1}
  queries[k] = i
#+end_src
#+begin_src latex
  We import \ty{strconv} and \ty{log}.
#+end_src
#+begin_src go <<Imports>>=
  "strconv"
  "log"
#+end_src
#+begin_src latex
  As we just saw, an \ty{Interval} consists of a chromosome, a start and
  an end, so we write the corresponding declaration.
#+end_src
#+begin_src go <<Types>>=
  type Interval struct {
	  Chr string
	  Start, End int
  }
#+end_src
#+begin_src latex
  As shown in the example data in Table~\ref{tab:cb}A, the query is
  located relative to the chromosome start, but the Blast hit is located
  relative to the query start. We also store it in zero-based
  coordinates.
#+end_src
#+begin_src go <<Add hit>>=
  bs, err := strconv.Atoi(fields[3])
  if err != nil { log.Fatal(err.Error()) }
  be, err := strconv.Atoi(fields[4])
  if err != nil { log.Fatal(err.Error()) }
  i := Interval{Start: bs-1, End: be-1}
  hits[k] = append(hits[k], i)
#+end_src
#+begin_src latex
  To print the complement, we iterate over the keys, mark the hits, and
  extract their complement. The columns in the result table are aligned
  with a tab writer based on blank-separated columns.
#+end_src
#+begin_src go <<Print complement>>=
  w := tabwriter.NewWriter(os.Stdout, 2, 1, 2, ' ', 0)
  for k, query := range queries {
	  ch := query.Chr
	  qs := query.Start
	  qe := query.End
	  //<<Mark hits>>
	  //<<Extract complement>>
  }
  w.Flush()
#+end_src
#+begin_src latex
  We import \ty{tabwriter} and \ty{os}.
#+end_src
#+begin_src go <<Imports>>=
  "text/tabwriter"
  "os"
#+end_src
#+begin_src latex
  We mark hits as true in a slice of boolean variables.
#+end_src
#+begin_src go <<Mark hits>>=
  l := qe - qs + 1
  marks := make([]bool, l)
  for _, hit := range hits[k] {
	  for i := hit.Start; i <= hit.End; i++ {
		  marks[i] = true
	  }
  }
#+end_src
#+begin_src latex
  We extract the Blast-complement by looking for the start and end of a
  complement. Then we print the complement interval.
#+end_src
#+begin_src go <<Extract complement>>=
  i := 0
  for i < len(marks) {
	  //<<Find start of complement>>
	  //<<Find end of complement>>
	  //<<Print complement interval>>
  }
#+end_src
#+begin_src latex
  The start is the first position that wasn't hit.
#+end_src
#+begin_src go <<Find start of complement>>=
  for i < len(marks) && marks[i] {
	  i++
  }
  s := i
#+end_src
#+begin_src latex
  The end is the last position that wasn't hit in the current run.
#+end_src
#+begin_src go <<Find end of complement>>=
  for i < len(marks) && !marks[i] {
	  i++
  }
  e := i - 1
#+end_src
#+begin_src latex
  If the length of the interval is greater than the minimum length, we
  print it.
#+end_src
#+begin_src go <<Print complement interval>>=
  l = e - s + 1
  if l >= minLen {
	  fmt.Fprintf(w, "%s\t%d\t%d\t%d\t%d\n",
		  ch, qs+1, qe+1, qs+s+1, qs+e+1)
  }
#+end_src
#+begin_src latex
  We import \ty{fmt}.
#+end_src
#+begin_src go <<Imports>>=
  "fmt"
#+end_src
#+begin_src latex
  We've finished writing \ty{cblast}, time to test it.
  \section*{Testing}
  The outline of our testing program provides hooks for imports and the
  testing logic.
#+end_src
#+begin_src go <<cblast_test.go>>=
  package main

  import (
	  "testing"
	  //<<Testing imports>>
  )

  func TestCblast(t *testing.T) {
	  //<<Testing>>
  }
#+end_src
#+begin_src latex
  Testing is done in two steps, we construct the tests and then loop
  over them.
#+end_src
#+begin_src go <<Testing>>=
  var tests []*exec.Cmd
  //<<Construct tests>>
  for i, test := range tests {
	  //<<Carry our test>>
  }
#+end_src
#+begin_src latex
  We import \ty{exec}.
#+end_src
#+begin_src go <<Testing imports>>=
  "os/exec"
#+end_src
#+begin_src latex
  We carry out four tests. The first is on the small data set in
  Table~\ref{tab:cb}A, contained in \ty{test1.txt}. The second is
  similar, except that the chromosome name is changed and the first hit
  is left out. That data is contained in \ty{test2.txt}. The third test
  analyzes both data files. The fourth test analyzes nested
  intervals. The minimum interval length is always 1.
#+end_src
#+begin_src go <<Construct tests>>=
  f1 := "test1.txt"
  f2 := "test2.txt"
  f3 := "test3.txt"
  test := exec.Command("./cblast", "-m", "1", f1)
  tests = append(tests, test)
  test = exec.Command("./cblast", "-m", "1", f2)
  tests = append(tests, test)
  test = exec.Command("./cblast", "-m", "1", f1, f2)
  tests = append(tests, test)
  test = exec.Command(".cblast", "-m", "1", f3)
#+end_src
#+begin_src latex
  For each test we compare what we get with what we want, which is
  contained in files \ty{r1.txt}, \ty{r2.txt}, and \ty{r3.txt}.
#+end_src
#+begin_src go <<Carry our test>>=
  get, err := test.Output()
  if err != nil { t.Error(err.Error()) }
  f := "r" + strconv.Itoa(i + 1) + ".txt"
  want, err := ioutil.ReadFile(f)
  if err != nil { t.Error(err.Error()) }
  if !bytes.Equal(get, want) {
	  t.Errorf("get:\n%s\nwant:\n%s\n",
		  string(get), string(want))
  }
#+end_src
#+begin_src latex
  We import \ty{strconv}, \ty{ioutil}, and \ty{bytes}.
#+end_src
#+begin_src go <<Testing imports>>=
  "strconv"
  "io/ioutil"
  "bytes"
#+end_src
